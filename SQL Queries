--spending comparison (2023 vs 2024)
WITH yearly_spending AS (
  SELECT 
    strftime('%Y', date) AS year,
    c.name AS category,
    ROUND(SUM(amount), 2) AS total_spent
  FROM transactions t
  JOIN categories c ON t.category_id = c.id
  GROUP BY year, category
)

SELECT 
  y2023.category,
  y2023.total_spent AS year_2023,
  y2024.total_spent AS year_2024,
  ROUND(y2024.total_spent - y2023.total_spent, 2) AS absolute_change,
  ROUND((y2024.total_spent - y2023.total_spent) / y2023.total_spent * 100, 1) AS percentage_change,
  CASE 
    WHEN y2024.total_spent > y2023.total_spent THEN '↑ Increase'
    WHEN y2024.total_spent < y2023.total_spent THEN '↓ Decrease'
    ELSE '→ No Change'
  END AS trend
FROM 
  (SELECT * FROM yearly_spending WHERE year = '2023') y2023
JOIN 
  (SELECT * FROM yearly_spending WHERE year = '2024') y2024
  ON y2023.category = y2024.category
ORDER BY ABS(percentage_change) DESC;

-- essential vs non-essential
SELECT 
  CASE WHEN is_essential = 1 THEN 'Essential' ELSE 'Non-essential' END AS priority,
  SUM(estimated_amount) AS total_estimated_cost,
  COUNT(*) AS item_count,
  ROUND(AVG(estimated_amount), 2) AS average_item_cost
FROM wishlist
GROUP BY is_essential
ORDER BY total_estimated_cost DESC;


-- highest spending month
WITH 
peak_month AS (
  SELECT
    strftime('%Y-%m', date) AS month_id,
    ROUND(SUM(amount),2)AS total_spent
  FROM transactions
  GROUP BY month_id
  ORDER BY total_spent DESC
  
)

SELECT
  CASE substr(p.month_id, 6, 2)
    WHEN '01' THEN 'January'
    WHEN '02' THEN 'February'
   WHEN '03' THEN 'March'
    WHEN  '04' THEN 'April'
    WHEN  '05' THEN 'May'
    WHEN  '06' THEN 'June'
    WHEN  '07' THEN 'July'
    WHEN  '08' THEN 'August'
    WHEN '09' THEN 'September'
    WHEN  '10' THEN 'October'
    WHEN  '11' THEN 'November'
    WHEN '12' THEN 'December'
  END || ' ' || substr(p.month_id, 1, 4) AS month_name,
  p.total_spent,
  c.name AS category,
  Round(SUM(t.amount),2) AS amount_spent
FROM transactions t
JOIN categories c ON t.category_id = c.id
CROSS JOIN peak_month p
WHERE strftime('%Y-%m', t.date) = p.month_id
GROUP BY month_name, p.total_spent, c.name
ORDER BY amount_spent DESC;

